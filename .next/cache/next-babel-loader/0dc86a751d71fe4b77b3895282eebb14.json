{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst Sequelize = require(\"sequelize\");\n\nconst basename = path.basename(__filename); // const env = process.env.NODE_ENV || \"development\";\n\nconst env = \"development\";\n\nconst config = require(__dirname + \"/../config/config.json\")[env];\n\nconst db = {};\nlet sequelize;\n\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nlet currentPath = path.resolve(process.env.PWD, \"models\");\n\nif (currentPath.indexOf(`C:\\\\c\\\\`) !== -1) {\n  currentPath = currentPath.replace(\"C:\\\\c\\\\\", \"C:\\\\\");\n}\n\nfs.readdirSync(currentPath).filter(file => {\n  return file.indexOf(\".\") !== 0 && file !== basename && file.slice(-3) === \".js\";\n}).forEach(file => {\n  const model = sequelize[\"import\"](path.join(currentPath, file));\n  db[model.name] = model;\n});\n\n_Object$keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\nsequelize.sync({\n  force: false\n});\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\nmodule.exports = db;","map":{"version":3,"sources":["/Users/imac/Desktop/mokaleme/models/index.js"],"names":["fs","require","path","Sequelize","basename","__filename","env","config","__dirname","db","sequelize","use_env_variable","process","database","username","password","currentPath","resolve","PWD","indexOf","replace","readdirSync","filter","file","slice","forEach","model","join","name","modelName","associate","sync","force","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,QAAQ,GAAGF,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAjB,C,CACA;;AACA,MAAMC,GAAG,GAAG,aAAZ;;AACA,MAAMC,MAAM,GAAGN,OAAO,CAACO,SAAS,GAAG,wBAAb,CAAP,CAA8CF,GAA9C,CAAf;;AACA,MAAMG,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIH,MAAM,CAACI,gBAAX,EAA6B;AAC3BD,EAAAA,SAAS,GAAG,IAAIP,SAAJ,CAAcS,OAAO,CAACN,GAAR,CAAYC,MAAM,CAACI,gBAAnB,CAAd,EAAoDJ,MAApD,CAAZ;AACD,CAFD,MAEO;AACLG,EAAAA,SAAS,GAAG,IAAIP,SAAJ,CACVI,MAAM,CAACM,QADG,EAEVN,MAAM,CAACO,QAFG,EAGVP,MAAM,CAACQ,QAHG,EAIVR,MAJU,CAAZ;AAMD;;AAED,IAAIS,WAAW,GAAGd,IAAI,CAACe,OAAL,CAAaL,OAAO,CAACN,GAAR,CAAYY,GAAzB,EAA8B,QAA9B,CAAlB;;AACA,IAAIF,WAAW,CAACG,OAAZ,CAAqB,SAArB,MAAmC,CAAC,CAAxC,EAA2C;AACzCH,EAAAA,WAAW,GAAGA,WAAW,CAACI,OAAZ,CAAoB,SAApB,EAA+B,MAA/B,CAAd;AACD;;AACDpB,EAAE,CAACqB,WAAH,CAAeL,WAAf,EACGM,MADH,CACUC,IAAI,IAAI;AACd,SACEA,IAAI,CAACJ,OAAL,CAAa,GAAb,MAAsB,CAAtB,IAA2BI,IAAI,KAAKnB,QAApC,IAAgDmB,IAAI,CAACC,KAAL,CAAW,CAAC,CAAZ,MAAmB,KADrE;AAGD,CALH,EAMGC,OANH,CAMWF,IAAI,IAAI;AACf,QAAMG,KAAK,GAAGhB,SAAS,CAAC,QAAD,CAAT,CAAoBR,IAAI,CAACyB,IAAL,CAAUX,WAAV,EAAuBO,IAAvB,CAApB,CAAd;AACAd,EAAAA,EAAE,CAACiB,KAAK,CAACE,IAAP,CAAF,GAAiBF,KAAjB;AACD,CATH;;AAWA,aAAYjB,EAAZ,EAAgBgB,OAAhB,CAAwBI,SAAS,IAAI;AACnC,MAAIpB,EAAE,CAACoB,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BrB,IAAAA,EAAE,CAACoB,SAAD,CAAF,CAAcC,SAAd,CAAwBrB,EAAxB;AACD;AACF,CAJD;;AAMAC,SAAS,CAACqB,IAAV,CAAe;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAf;AAEAvB,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACN,SAAH,GAAeA,SAAf;AAEA8B,MAAM,CAACC,OAAP,GAAiBzB,EAAjB","sourcesContent":["\"use strict\";\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst Sequelize = require(\"sequelize\");\nconst basename = path.basename(__filename);\n// const env = process.env.NODE_ENV || \"development\";\nconst env = \"development\";\nconst config = require(__dirname + \"/../config/config.json\")[env];\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(\n    config.database,\n    config.username,\n    config.password,\n    config\n  );\n}\n\nlet currentPath = path.resolve(process.env.PWD, \"models\");\nif (currentPath.indexOf(`C:\\\\c\\\\`) !== -1) {\n  currentPath = currentPath.replace(\"C:\\\\c\\\\\", \"C:\\\\\");\n}\nfs.readdirSync(currentPath)\n  .filter(file => {\n    return (\n      file.indexOf(\".\") !== 0 && file !== basename && file.slice(-3) === \".js\"\n    );\n  })\n  .forEach(file => {\n    const model = sequelize[\"import\"](path.join(currentPath, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\nsequelize.sync({ force: false });\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;"]},"metadata":{},"sourceType":"script"}